struct Edge{
	int vex; // 정점  
	int dis; // 정점까지 가는데 드는 비용  
	Edge(int a, int b){
		vex=a; 
		dis=b;
	}
	bool operator<(const Edge &b) const{
	return dis>b.dis; // min heap 
	}
}; 
int main(){
	ios_base::sync_with_stdio(false);
	freopen("input.txt", "rt", stdin);
	priority_queue<Edge> Q;
	vector<pair<int, int>> graph[30];
	int i, n, m, a, b, c;
	cin>>n>>m;
	vector<int> dist(n+1, 2147000000); // 큰 값으로 초기화 
	for(i=1; i<=m; i++){
		cin>>a>>b>>c;
		graph[a].push_back(make_pair(b, c));
	} 
	Q.push(Edge(1, 0));
	dist[1] = 0; // 0번 노드까지 가는 비용은 0  
	while(!Q.empty()){
		// 가장 위에 있는 가중치 최솟값인 노드 꺼냄  
		int now=Q.top().vex;
		int cost=Q.top().dis;
		Q.pop();
		if(cost>dist[now]) continue; // 방금 꺼낸 비용이 dist에 저장되어 있는 비용보다 더 크면 갱신 안함 (할필요없음)  
		for(i=0; i<graph[now].size(); i++){ // now 노드에 연결되어 있는 모든 노드와 가중치를 Q에 push  
			int next=graph[now][i].first;  
			int nextDis=cost+graph[now][i].second;
			if(dist[next]>nextDis) {
				dist[next]=nextDis;
				Q.push(Edge(next, nextDis));
			}
		} 
	}
	for(i=2; i<=n; i++){
		if(dist[i]!=2147000000) cout<<i<<" : "<<dist[i]<<endl;
		else cout<<i<<" : impossible"<<endl;
	}
	return 0; 
}  
